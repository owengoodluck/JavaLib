package com.owen.wms.lekani.wsdl;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * <b>接口使用文档请访问</b>:<a href='http://document.pfhoo.com/StandardAPI/Default.aspx' target='_blank'>http://document.pfhoo.com/StandardAPI/Default.aspx</a>
 *
 * This class was generated by Apache CXF 3.1.5
 * 2016-02-27T13:40:51.299+08:00
 * Generated source version: 3.1.5
 * 
 */
@WebServiceClient(name = "Lekani_Standard_WebService", 
                  wsdlLocation = "http://service.pfhoo.com/Standard/WebService/Lekani_Standard_WebService.asmx?wsdl",
                  targetNamespace = "http://tempuri.org/") 
public class LekaniStandardWebService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "Lekani_Standard_WebService");
    public final static QName LekaniStandardWebServiceSoap12 = new QName("http://tempuri.org/", "Lekani_Standard_WebServiceSoap12");
    public final static QName LekaniStandardWebServiceSoap = new QName("http://tempuri.org/", "Lekani_Standard_WebServiceSoap");
    public final static QName LekaniStandardWebServiceHttpGet = new QName("http://tempuri.org/", "Lekani_Standard_WebServiceHttpGet");
    public final static QName LekaniStandardWebServiceHttpPost = new QName("http://tempuri.org/", "Lekani_Standard_WebServiceHttpPost");
    static {
        URL url = null;
        try {
            url = new URL("http://service.pfhoo.com/Standard/WebService/Lekani_Standard_WebService.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(LekaniStandardWebService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://service.pfhoo.com/Standard/WebService/Lekani_Standard_WebService.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public LekaniStandardWebService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public LekaniStandardWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public LekaniStandardWebService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public LekaniStandardWebService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public LekaniStandardWebService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public LekaniStandardWebService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns LekaniStandardWebServiceSoap
     */
    @WebEndpoint(name = "Lekani_Standard_WebServiceSoap12")
    public LekaniStandardWebServiceSoap getLekaniStandardWebServiceSoap12() {
        return super.getPort(LekaniStandardWebServiceSoap12, LekaniStandardWebServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LekaniStandardWebServiceSoap
     */
    @WebEndpoint(name = "Lekani_Standard_WebServiceSoap12")
    public LekaniStandardWebServiceSoap getLekaniStandardWebServiceSoap12(WebServiceFeature... features) {
        return super.getPort(LekaniStandardWebServiceSoap12, LekaniStandardWebServiceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns LekaniStandardWebServiceSoap
     */
    @WebEndpoint(name = "Lekani_Standard_WebServiceSoap")
    public LekaniStandardWebServiceSoap getLekaniStandardWebServiceSoap() {
        return super.getPort(LekaniStandardWebServiceSoap, LekaniStandardWebServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LekaniStandardWebServiceSoap
     */
    @WebEndpoint(name = "Lekani_Standard_WebServiceSoap")
    public LekaniStandardWebServiceSoap getLekaniStandardWebServiceSoap(WebServiceFeature... features) {
        return super.getPort(LekaniStandardWebServiceSoap, LekaniStandardWebServiceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns LekaniStandardWebServiceHttpGet
     */
    @WebEndpoint(name = "Lekani_Standard_WebServiceHttpGet")
    public LekaniStandardWebServiceHttpGet getLekaniStandardWebServiceHttpGet() {
        return super.getPort(LekaniStandardWebServiceHttpGet, LekaniStandardWebServiceHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LekaniStandardWebServiceHttpGet
     */
    @WebEndpoint(name = "Lekani_Standard_WebServiceHttpGet")
    public LekaniStandardWebServiceHttpGet getLekaniStandardWebServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(LekaniStandardWebServiceHttpGet, LekaniStandardWebServiceHttpGet.class, features);
    }


    /**
     *
     * @return
     *     returns LekaniStandardWebServiceHttpPost
     */
    @WebEndpoint(name = "Lekani_Standard_WebServiceHttpPost")
    public LekaniStandardWebServiceHttpPost getLekaniStandardWebServiceHttpPost() {
        return super.getPort(LekaniStandardWebServiceHttpPost, LekaniStandardWebServiceHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LekaniStandardWebServiceHttpPost
     */
    @WebEndpoint(name = "Lekani_Standard_WebServiceHttpPost")
    public LekaniStandardWebServiceHttpPost getLekaniStandardWebServiceHttpPost(WebServiceFeature... features) {
        return super.getPort(LekaniStandardWebServiceHttpPost, LekaniStandardWebServiceHttpPost.class, features);
    }

}
